module Mystery3

  use int.Int

  function g_verif (n : int) : int
    axiom g0: g_verif 0 = 0
    axiom g1: g_verif 1 = 1
    axiom gn: forall n . 0 <= n -> g_verif(n+2) = 2*g_verif (n+1) + g_verif (n)

  let g (n : int) : int =
    requires { 0 <= n}
    ensures { result = g_verif(n) }

    let ref a = 0 in
    let ref b = 1 in
    let ref s = 0 in
    let ref c = 0 in
    while c < n do
      invariant { 0 <= c <= n }
      invariant { a = g_verif(c) /\ b = g_verif(c+1) }
      variant { n - c }

      s <- a + b;
      a <- b;
      b <- s + b;
      c <- c + 1
    done;
    a

end
