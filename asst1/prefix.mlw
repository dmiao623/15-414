module Prefix

  use int.Int
  use array.Array
  use array.ArrayEq
  use array.ArraySum
  use ref.Ref

  predicate is_prefix_sums (a : array int) (b : array int) =
    a.length = b.length /\
    forall i. 0 <= i < a.length -> b[i] = sum a 0 (i+1)

  let prefix_sums (a : array int) : array int
    ensures { is_prefix_sums a result }
    ensures { a = (old a) }
  =
    let n = a.length in
    let b = make n 0 in
    if n > 0 then b[0] <- a[0] ;
    for i = 1 to n - 1 do
      invariant { b[0] = a[0] }
      invariant { forall k. 0 <= k < i -> b[k] = sum a 0 (k+1) }
      b[i] <- b[i-1] + a[i]
    done ;
    b

  let prefix_sums_in_place (a : array int) : unit
    ensures { a[0] = (old a)[0] }
    ensures { forall k:int. 0 < k < a.length -> a[k-1] + (old a)[k] = a[k] }
  =
    let n = a.length in
    assert { n >= 0 };
    if n = 0 then () else
      let ref acc = 0 in
      for i = 0 to n - 1 do
        invariant { i > 0 -> acc = a[i-1] }
        invariant { i = 0 -> acc = 0 }
        invariant { a[0] = (old a)[0] }
        invariant { forall k:int. 0 < k < i -> a[k-1] + (old a)[k] = a[k]}
        invariant { forall k:int. i <= k < n -> a[k] = (old a)[k] }
        
        acc <- acc + a[i] ;
        assert { a[i] = (old a)[i] } ;
        a[i] <- acc ;
      done

end

